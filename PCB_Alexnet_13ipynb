{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "PCB_Alexnet.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "UdDUSm89wjvi"
      ],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/victordaniel/Deeplearning/blob/master/PCB_Alexnet_13ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cqnoWGjx1iIC",
        "colab_type": "text"
      },
      "source": [
        "**Imports**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yi98Z22q1jIv",
        "colab_type": "code",
        "outputId": "baecd076-3759-47c0-9f20-9c9413a0447e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "%tensorflow_version 1.x\n",
        " "
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "TensorFlow 1.x selected.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uT4YaLEJXOxi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.python.keras.layers import Dense\n",
        "from tensorflow.python.keras import Sequential\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "URQQuXeXadGq",
        "colab_type": "code",
        "outputId": "9f0ac19a-d73e-435f-f0b4-6e55607fd4ae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "\n",
        "from matplotlib import pyplot\n",
        "%matplotlib inline\n",
        "#from scipy.misc import toimage\n",
        "import numpy\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Dropout\n",
        "from keras.layers import Flatten\n",
        "from keras.constraints import maxnorm\n",
        "from keras.optimizers import SGD\n",
        "from keras.layers.convolutional import Conv2D\n",
        "from keras.layers import BatchNormalization\n",
        "from keras.layers.convolutional import MaxPooling2D\n",
        "from keras.utils import np_utils\n",
        "from keras import backend as K\n",
        "from sklearn.model_selection import train_test_split\n",
        "#K.set_image_dim_ordering('tf')\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OqRLtJ8tWsCD",
        "colab_type": "code",
        "outputId": "48cc1098-fe59-42fe-d22d-3516a51756bc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "%tensorflow_version"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Currently selected TF version: 1.x\n",
            "Available versions:\n",
            "* 1.x\n",
            "* 2.x\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5I0tVzV7v7Cb",
        "colab_type": "code",
        "outputId": "1c58ab93-456b-4f7d-fb85-b6de71aac548",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "\n",
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aZGfSuz-XK82",
        "colab_type": "code",
        "outputId": "1db3aba9-835d-4d9a-ce2b-ff85bbae4e99",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        }
      },
      "source": [
        "import os\n",
        "print(os.getcwd())\n",
        "print(os.chdir('/content/drive/My Drive/'))\n",
        "print(os.listdir())"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content\n",
            "None\n",
            "['s_x_train (1).npy', 's_x_train.npy', 'pcb_aug.npy', 'pcb_aug_y.npy', 'Getting started.pdf', '2017-ieee-Anomaly-Detection-in-Online-Social-Network-A-Survey.pdf', '01565707.pdf', '6-oddball.pdf', 'A-comparative-analysis-of-structural-graph-metrics-t_2017_Computers---Electr.pdf', 'Anomaly detection in multiplex network.docx', 'Anomaly detection in multiplex network.pdf', 'anomaly detection in multiplex networks.html', 'anomaly detection in social networks.pdf', 'definitions.pdf', 'easy.pdf', 'eigen vector anomaly detection.pdf', 'evolving data survey.pdf', 'facebook.tar.gz', 'graph based kmeans clustering.pdf', 'graph similarity.pdf', 'Graph_Cluster_Analysis.pdf', 'GraphClustering_Schaeffer07.pdf', 'hadassah.pdf', 'imp.pdf', 'Graphtheory.pdf', 'image.png', 'M.Tech. DA Syllabus1.pdf', 'matrix factorization.pdf', 'Networks An introduction.pdf', 'New Text Document.txt', 'nguyen-phan-anh-bsc.pdf', 'Notes (1).docx', 'oddball_Technical report.pdf', 'phd thesis preliminary  work.pdf', 'PPT1.pptx', 'PPT [Autosaved].pptx', 'PPT.pptx', 'PPT-graph_theory_1-11.pdf', 'PPT-Graph.pdf', 'rsingh kaur detecting anomalies in online social networks.pdf', 'SCAN.pdf', 'srivastava.pdf', 'stream graphs survey.pdf', 'streaming data.pdf', 'subgraph anomaly.pdf', 'survey11.pdf', 'thesis-large scale data processing.pdf', 'survey.ppt', 'triangle counting.pdf', 'vaisa.docx', 'thesis.pdf', 'writeup.docx', 'Colab Notebooks', 'Project', 'data.xlsx', 'Anomaly_Graph_Neural_Net-master', 'fwdtutorialclass', 'mnist', 'train.csv', 'PCB', 'x_train.npy', 'y_train.npy', 'Copy of xtrain.npy', 'Copy of ytrain.npy', 'raw_x_train.npy', 'raw_y_train.npy']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ToGR7e_y_fIO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from IPython.display import Image,display\n",
        "#display(Image(filename='/content/drive/My Drive/SSDL/Day2/Image/alex.png',embed=True))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GC7V1kd3WS26",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jm_m4mk7C3NS",
        "colab_type": "code",
        "outputId": "a699afb8-838d-4f49-a613-e176843699f2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "import numpy as np\n",
        "data_x=np.load('x_train.npy')\n",
        "data_y=np.load('y_train.npy')\n",
        "#print(len(data_x))\n",
        "#print(len(data_y))\n",
        "#train_x=data_x\n",
        "#train_y=data_y\n",
        "##print(train_x.shape)\n",
        "#print(train_y.shape)\n",
        "#print(np.unique(train_y))\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "#X_train, X_test, y_train, y_test = train_test_split(train_x, train_y, test_size=0.2)\n",
        "X_train,  y_train = data_x, data_y\n",
        "#X_test=np.load('Copy of xtrain.npy')\n",
        "#y_test=np.load('Copy of ytrain.npy')\n",
        "\n",
        "\n",
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(5040, 300, 300, 3)\n",
            "(5040,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KEqXDn_-Cohg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "X_test=np.load('Copy of xtrain.npy')\n",
        "y_test=np.load('Copy of ytrain.npy')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vCI23a9euM12",
        "colab_type": "code",
        "outputId": "0fcbf437-a8be-4653-8a11-a15c57dd042e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "\"\"\"\"\n",
        "#X_train,  y_train = data_x, data_y\n",
        "X_test=np.load('raw_x_train.npy')\n",
        "y_test=np.load('raw_y_train.npy')\n",
        "\"\"\""
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\"\\n#X_train,  y_train = data_x, data_y\\nX_test=np.load(\\'raw_x_train.npy\\')\\ny_test=np.load(\\'raw_y_train.npy\\')\\n'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bp8INPwY9Bm3",
        "colab_type": "code",
        "outputId": "8397c3af-93de-4ead-fc74-6b416a12e015",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "print(len(X_train))\n",
        "print(len(y_train))\n",
        "print(len(X_test))\n",
        "print(len(y_test))"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "5040\n",
            "5040\n",
            "298\n",
            "298\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jcbAIDa4OGjv",
        "colab_type": "code",
        "outputId": "fb28ee4e-a4a9-4fb9-d9ea-eddd5ef3abcd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(np.unique(y_test))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0. 1.]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q_vFpdGS9QRN",
        "colab_type": "code",
        "outputId": "cf346540-b2e3-4e21-89fb-424dc7817266",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_test.shape)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(5040, 300, 300, 3)\n",
            "(5040,)\n",
            "(298, 300, 300, 3)\n",
            "(298,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TjlL-TMDlUDU",
        "colab_type": "text"
      },
      "source": [
        "**Pre-Processing**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pR0tRV4P2XtI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train = X_train.astype('float32')\n",
        "X_test = X_test.astype('float32')\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kSY7SyaQ2blN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_train = np_utils.to_categorical(y_train)\n",
        "y_test = np_utils.to_categorical(y_test)\n",
        "num_classes = y_test.shape[1]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AcXLq5oOlHJD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.optimizers import adam\n",
        "from keras import regularizers"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KUZNDYUkmwkm",
        "colab_type": "text"
      },
      "source": [
        "**AlexNet Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yfGBezzS2kal",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "def AlexNet_model():\n",
        "\n",
        "    model = Sequential()\n",
        "    \n",
        "    model.add(Conv2D(32, (3, 3), input_shape=(300, 300, 3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2),strides=2))\n",
        "    \n",
        "    \n",
        "    model.add(Conv2D(32, (3, 3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    \n",
        "    model.add(Conv2D(64, (3, 3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2))) \n",
        "     \n",
        "\n",
        "    \n",
        "    model.add(Conv2D(128, (3, 3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    \n",
        "    model.add(Conv2D(128, (3, 3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "    \n",
        "    model.add(Dropout(0.25))\n",
        "    model.add(Flatten())\n",
        "    \n",
        "    model.add(Dense(1024, activation='relu'))\n",
        "    model.add(Dense(512, activation='relu'))\n",
        "    \n",
        "    model.add(Dense(num_classes, activation='sigmoid'))\n",
        "    \n",
        "    lrate = 0.0001\n",
        "    epochs=20\n",
        "    decay = lrate/epochs\n",
        "    optimizer =adam(lr=0.0001)\n",
        "    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
        "    \n",
        "    return model\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NHM1stCYFKev",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "90ab43c0-c499-4deb-9b63-d23536523398"
      },
      "source": [
        "\"\"\"\n",
        "def AlexNet_model():\n",
        "\n",
        "    model = Sequential()\n",
        "    \n",
        "    model.add(Conv2D(96, (11, 11), strides=4,input_shape=(300, 300, 3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(3, 3),strides=2))\n",
        "\n",
        "\n",
        "    model.add(Conv2D(256, (5, 5), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(3,3),strides=2))\n",
        "    \n",
        "    \n",
        "    model.add(Conv2D(384, (3,3), activation='relu',padding='same'))\n",
        "    model.add(Conv2D(384, (3,3), activation='relu',padding='same'))\n",
        "    model.add(Conv2D(256, (3,3), activation='relu',padding='same'))\n",
        "    model.add(MaxPooling2D(pool_size=(3,3),strides=2))\n",
        "       \n",
        "    model.add(Dropout(0.50))\n",
        "    model.add(Flatten())\n",
        "    \n",
        "    #model.add(Dense(9216, activation='relu'))\n",
        "    model.add(Dense(4096, activation='relu'))\n",
        "    model.add(Dropout(0.50))\n",
        "    model.add(Dense(4096, activation='relu'))\n",
        "    \n",
        "    model.add(Dense(num_classes, activation='sigmoid'))\n",
        "    \n",
        "    lrate = 0.0001\n",
        "    epochs=35\n",
        "    decay = lrate/epochs\n",
        "    optimizer =adam(lr=0.0001)\n",
        "    #sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)\n",
        "    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
        "    \n",
        "    return model\n",
        "    \"\"\""
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"\\ndef AlexNet_model():\\n\\n    model = Sequential()\\n    \\n    model.add(Conv2D(96, (11, 11), strides=4,input_shape=(300, 300, 3), activation='relu',padding='same'))\\n    model.add(MaxPooling2D(pool_size=(3, 3),strides=2))\\n\\n\\n    model.add(Conv2D(256, (5, 5), activation='relu',padding='same'))\\n    model.add(MaxPooling2D(pool_size=(3,3),strides=2))\\n    \\n    \\n    model.add(Conv2D(384, (3,3), activation='relu',padding='same'))\\n    model.add(Conv2D(384, (3,3), activation='relu',padding='same'))\\n    model.add(Conv2D(256, (3,3), activation='relu',padding='same'))\\n    model.add(MaxPooling2D(pool_size=(3,3),strides=2))\\n       \\n    model.add(Dropout(0.50))\\n    model.add(Flatten())\\n    \\n    #model.add(Dense(9216, activation='relu'))\\n    model.add(Dense(4096, activation='relu'))\\n    model.add(Dropout(0.50))\\n    model.add(Dense(4096, activation='relu'))\\n    \\n    model.add(Dense(num_classes, activation='sigmoid'))\\n    \\n    lrate = 0.0001\\n    epochs=35\\n    decay = lrate/epochs\\n    optimizer =adam(lr=0.0001)\\n    #sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)\\n    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\\n    \\n    return model\\n    \""
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0y0g6PGiCeGl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GqWsPnU-Bv5k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#os.chdir('/content/drive/My Drive/Colab Notebooks/DL_Practical_MLP/Results/MLP_CIFAR10')\n",
        "import keras\n",
        "import keras.callbacks\n",
        "from keras.callbacks import TensorBoard\n",
        "from keras.callbacks import EarlyStopping,ModelCheckpoint\n",
        "mc = ModelCheckpoint('PCB_ALEXNET.h5', monitor='val_loss', mode='min', verbose=1, save_best_only=True)\n",
        "filepath = \"saved-model-{epoch:02d}.h5\"\n",
        "mc1 = ModelCheckpoint(filepath, monitor='val_loss', mode='min', verbose=1, save_best_only=True  ,period=10)\n",
        "cv = keras.callbacks.CSVLogger('PCB_ALEXNET.h5.csv', separator=',', append=False)\n",
        "es = keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=75,  mode='auto')\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SuRI-isDYqfR",
        "colab_type": "code",
        "outputId": "01b442f0-347e-4e79-cef8-cb343bd298c8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "\n",
        "\"\"\"\n",
        "import os\n",
        "os.chdir(\"/content/drive/My Drive/PCB\")\n",
        "from keras.callbacks import ModelCheckpoint, TensorBoard, CSVLogger\n",
        "mc = ModelCheckpoint('cipharAlexNetNet.h5', monitor='val_loss', save_best_only=True)\n",
        "tb = TensorBoard(log_dir='/content/cnn/My Drive/logs', write_graph=True, write_grads=False, write_images=False, embeddings_freq=0, update_freq='epoch')\n",
        "cv = CSVLogger('cipharAlexNetNet.csv',append=True)\n",
        "\"\"\""
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nimport os\\nos.chdir(\"/content/drive/My Drive/PCB\")\\nfrom keras.callbacks import ModelCheckpoint, TensorBoard, CSVLogger\\nmc = ModelCheckpoint(\\'cipharAlexNetNet.h5\\', monitor=\\'val_loss\\', save_best_only=True)\\ntb = TensorBoard(log_dir=\\'/content/cnn/My Drive/logs\\', write_graph=True, write_grads=False, write_images=False, embeddings_freq=0, update_freq=\\'epoch\\')\\ncv = CSVLogger(\\'cipharAlexNetNet.csv\\',append=True)\\n'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pay7jAJizkA1",
        "colab_type": "code",
        "outputId": "a16810ab-57af-4d9b-ed56-83e780f7432a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from keras.callbacks import ModelCheckpoint\n",
        "\"\"\"\n",
        "model = Sequential()\n",
        "model.add(Dense(10, input_dim=784, kernel_initializer='uniform'))\n",
        "model.add(Activation('softmax'))\n",
        "model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n",
        "\"\"\"\n",
        "'''\n",
        "saves the model weights after each epoch if the validation loss decreased\n",
        "'''\n",
        "#checkpointer = ModelCheckpoint(filepath='/tmp/weights.hdf5', verbose=1, save_best_only=True)\n",
        "#model.fit(x_train, y_train, batch_size=128, epochs=20, verbose=0, validation_data=(X_test, Y_test), callbacks=[checkpointer])\n",
        "\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nsaves the model weights after each epoch if the validation loss decreased\\n'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gPLGgrRuDBSx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.losses import mean_squared_error,mean_absolute_error,mean_squared_logarithmic_error,categorical_hinge,hinge,squared_hinge,categorical_crossentropy\n",
        "from keras.optimizers import adam,adadelta,adagrad,adamax,sgd\n",
        "#model.compile(loss=\"categorical_crossentropy\", optimizer=\"sgd\", metrics=['accuracy'])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "luwtQNV4DTpE",
        "colab_type": "code",
        "outputId": "1ce8afab-e7c4-418e-f0ba-d1c75c48314c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "model=AlexNet_model()\n",
        "print(model.summary())\n"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3657: The name tf.log is deprecated. Please use tf.math.log instead.\n",
            "\n",
            "WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/nn_impl.py:183: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 300, 300, 32)      896       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 150, 150, 32)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 150, 150, 32)      9248      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 75, 75, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 75, 75, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 37, 37, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 37, 37, 128)       73856     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_4 (MaxPooling2 (None, 18, 18, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_5 (Conv2D)            (None, 18, 18, 128)       147584    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_5 (MaxPooling2 (None, 9, 9, 128)         0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 9, 9, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 10368)             0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1024)              10617856  \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 2)                 1026      \n",
            "=================================================================\n",
            "Total params: 11,393,762\n",
            "Trainable params: 11,393,762\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "61Uf2JPb5iMu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class WeightCallback(keras.callbacks.Callback):\n",
        "    def on_epoch_end(self, epoch, logs={}):\n",
        "        if epoch%1 == 0:\n",
        "            fig, axs = plt.subplots(1,10, figsize=(10*1.5,1.5), facecolor='w', edgecolor='k')\n",
        "            for i in range(10):\n",
        "                axs[i].set_title(\"Digit : \" + str(i))\n",
        "                digit = model.layers[0].get_weights()[0][:,i]\n",
        "                digit = ((digit - digit.min())*(1/(digit.max() - digit.min()))*255).astype(\"uint8\")\n",
        "                axs[i].imshow(digit.reshape(300,300,3),cmap=\"viridis\")\n",
        "weight = WeightCallback()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CelvtHxR-oDv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "checkpointer = ModelCheckpoint(filepath='/tmp/weights.hdf5', verbose=1, save_best_only=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WDGm8asglYaj",
        "colab_type": "text"
      },
      "source": [
        "0**Keras Callbacks**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KM31YNZh4UB6",
        "colab_type": "code",
        "outputId": "3df63e00-0992-4fbc-f284-4ea2457d03a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "history=model.fit(X_train, y_train, validation_split=(0.2), epochs=35, batch_size=32,verbose=2,callbacks=[checkpointer])\n",
        "#model.fit(x_train, y_train, batch_size=128, epochs=20, verbose=0, validation_data=(X_test, Y_test), callbacks=[checkpointer])\n",
        "\n",
        "\n"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3005: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n",
            "\n",
            "Train on 4032 samples, validate on 1008 samples\n",
            "Epoch 1/35\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n",
            "\n",
            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n",
            "\n",
            " - 22s - loss: 0.6655 - acc: 0.6224 - val_loss: 1.0427 - val_acc: 0.0000e+00\n",
            "\n",
            "Epoch 00001: val_loss improved from inf to 1.04268, saving model to /tmp/weights.hdf5\n",
            "Epoch 2/35\n",
            " - 8s - loss: 0.6645 - acc: 0.6250 - val_loss: 0.9937 - val_acc: 0.0000e+00\n",
            "\n",
            "Epoch 00002: val_loss improved from 1.04268 to 0.99370, saving model to /tmp/weights.hdf5\n",
            "Epoch 3/35\n",
            " - 8s - loss: 0.6618 - acc: 0.6250 - val_loss: 0.9337 - val_acc: 0.0000e+00\n",
            "\n",
            "Epoch 00003: val_loss improved from 0.99370 to 0.93374, saving model to /tmp/weights.hdf5\n",
            "Epoch 4/35\n",
            " - 8s - loss: 0.6621 - acc: 0.6250 - val_loss: 0.9480 - val_acc: 0.0000e+00\n",
            "\n",
            "Epoch 00004: val_loss did not improve from 0.93374\n",
            "Epoch 5/35\n",
            " - 8s - loss: 0.6446 - acc: 0.6549 - val_loss: 0.9743 - val_acc: 0.2183\n",
            "\n",
            "Epoch 00005: val_loss did not improve from 0.93374\n",
            "Epoch 6/35\n",
            " - 8s - loss: 0.4474 - acc: 0.8114 - val_loss: 0.6697 - val_acc: 0.7054\n",
            "\n",
            "Epoch 00006: val_loss improved from 0.93374 to 0.66967, saving model to /tmp/weights.hdf5\n",
            "Epoch 7/35\n",
            " - 8s - loss: 0.3151 - acc: 0.8863 - val_loss: 0.3866 - val_acc: 0.8061\n",
            "\n",
            "Epoch 00007: val_loss improved from 0.66967 to 0.38662, saving model to /tmp/weights.hdf5\n",
            "Epoch 8/35\n",
            " - 8s - loss: 0.2569 - acc: 0.9103 - val_loss: 0.4165 - val_acc: 0.8115\n",
            "\n",
            "Epoch 00008: val_loss did not improve from 0.38662\n",
            "Epoch 9/35\n",
            " - 8s - loss: 0.2298 - acc: 0.9175 - val_loss: 0.3832 - val_acc: 0.8130\n",
            "\n",
            "Epoch 00009: val_loss improved from 0.38662 to 0.38318, saving model to /tmp/weights.hdf5\n",
            "Epoch 10/35\n",
            " - 8s - loss: 0.1825 - acc: 0.9338 - val_loss: 0.3661 - val_acc: 0.8338\n",
            "\n",
            "Epoch 00010: val_loss improved from 0.38318 to 0.36613, saving model to /tmp/weights.hdf5\n",
            "Epoch 11/35\n",
            " - 8s - loss: 0.1454 - acc: 0.9439 - val_loss: 0.2365 - val_acc: 0.8929\n",
            "\n",
            "Epoch 00011: val_loss improved from 0.36613 to 0.23647, saving model to /tmp/weights.hdf5\n",
            "Epoch 12/35\n",
            " - 8s - loss: 0.1152 - acc: 0.9567 - val_loss: 0.3347 - val_acc: 0.8834\n",
            "\n",
            "Epoch 00012: val_loss did not improve from 0.23647\n",
            "Epoch 13/35\n",
            " - 8s - loss: 0.0980 - acc: 0.9625 - val_loss: 0.2437 - val_acc: 0.9097\n",
            "\n",
            "Epoch 00013: val_loss did not improve from 0.23647\n",
            "Epoch 14/35\n",
            " - 8s - loss: 0.0756 - acc: 0.9723 - val_loss: 0.2701 - val_acc: 0.9147\n",
            "\n",
            "Epoch 00014: val_loss did not improve from 0.23647\n",
            "Epoch 15/35\n",
            " - 8s - loss: 0.0670 - acc: 0.9751 - val_loss: 0.3472 - val_acc: 0.9033\n",
            "\n",
            "Epoch 00015: val_loss did not improve from 0.23647\n",
            "Epoch 16/35\n",
            " - 8s - loss: 0.0538 - acc: 0.9779 - val_loss: 0.3316 - val_acc: 0.9102\n",
            "\n",
            "Epoch 00016: val_loss did not improve from 0.23647\n",
            "Epoch 17/35\n",
            " - 8s - loss: 0.0429 - acc: 0.9831 - val_loss: 0.2902 - val_acc: 0.9241\n",
            "\n",
            "Epoch 00017: val_loss did not improve from 0.23647\n",
            "Epoch 18/35\n",
            " - 8s - loss: 0.0516 - acc: 0.9841 - val_loss: 0.4062 - val_acc: 0.9043\n",
            "\n",
            "Epoch 00018: val_loss did not improve from 0.23647\n",
            "Epoch 19/35\n",
            " - 8s - loss: 0.0409 - acc: 0.9851 - val_loss: 0.2595 - val_acc: 0.9335\n",
            "\n",
            "Epoch 00019: val_loss did not improve from 0.23647\n",
            "Epoch 20/35\n",
            " - 8s - loss: 0.0371 - acc: 0.9850 - val_loss: 0.4073 - val_acc: 0.9058\n",
            "\n",
            "Epoch 00020: val_loss did not improve from 0.23647\n",
            "Epoch 21/35\n",
            " - 8s - loss: 0.0300 - acc: 0.9881 - val_loss: 0.4232 - val_acc: 0.9087\n",
            "\n",
            "Epoch 00021: val_loss did not improve from 0.23647\n",
            "Epoch 22/35\n",
            " - 8s - loss: 0.0322 - acc: 0.9874 - val_loss: 0.3118 - val_acc: 0.9261\n",
            "\n",
            "Epoch 00022: val_loss did not improve from 0.23647\n",
            "Epoch 23/35\n",
            " - 8s - loss: 0.0212 - acc: 0.9911 - val_loss: 0.2843 - val_acc: 0.9439\n",
            "\n",
            "Epoch 00023: val_loss did not improve from 0.23647\n",
            "Epoch 24/35\n",
            " - 8s - loss: 0.0195 - acc: 0.9933 - val_loss: 0.2660 - val_acc: 0.9494\n",
            "\n",
            "Epoch 00024: val_loss did not improve from 0.23647\n",
            "Epoch 25/35\n",
            " - 8s - loss: 0.0275 - acc: 0.9907 - val_loss: 0.2655 - val_acc: 0.9107\n",
            "\n",
            "Epoch 00025: val_loss did not improve from 0.23647\n",
            "Epoch 26/35\n",
            " - 8s - loss: 0.0684 - acc: 0.9769 - val_loss: 0.2742 - val_acc: 0.9296\n",
            "\n",
            "Epoch 00026: val_loss did not improve from 0.23647\n",
            "Epoch 27/35\n",
            " - 8s - loss: 0.0211 - acc: 0.9926 - val_loss: 0.3801 - val_acc: 0.9291\n",
            "\n",
            "Epoch 00027: val_loss did not improve from 0.23647\n",
            "Epoch 28/35\n",
            " - 8s - loss: 0.0204 - acc: 0.9928 - val_loss: 0.3314 - val_acc: 0.9350\n",
            "\n",
            "Epoch 00028: val_loss did not improve from 0.23647\n",
            "Epoch 29/35\n",
            " - 8s - loss: 0.0174 - acc: 0.9944 - val_loss: 0.2138 - val_acc: 0.9559\n",
            "\n",
            "Epoch 00029: val_loss improved from 0.23647 to 0.21379, saving model to /tmp/weights.hdf5\n",
            "Epoch 30/35\n",
            " - 8s - loss: 0.0194 - acc: 0.9924 - val_loss: 0.3466 - val_acc: 0.9464\n",
            "\n",
            "Epoch 00030: val_loss did not improve from 0.21379\n",
            "Epoch 31/35\n",
            " - 8s - loss: 0.0148 - acc: 0.9938 - val_loss: 0.4697 - val_acc: 0.9320\n",
            "\n",
            "Epoch 00031: val_loss did not improve from 0.21379\n",
            "Epoch 32/35\n",
            " - 8s - loss: 0.0125 - acc: 0.9950 - val_loss: 0.3879 - val_acc: 0.9395\n",
            "\n",
            "Epoch 00032: val_loss did not improve from 0.21379\n",
            "Epoch 33/35\n",
            " - 8s - loss: 0.0111 - acc: 0.9955 - val_loss: 0.4076 - val_acc: 0.9420\n",
            "\n",
            "Epoch 00033: val_loss did not improve from 0.21379\n",
            "Epoch 34/35\n",
            " - 8s - loss: 0.0231 - acc: 0.9936 - val_loss: 0.3398 - val_acc: 0.9444\n",
            "\n",
            "Epoch 00034: val_loss did not improve from 0.21379\n",
            "Epoch 35/35\n",
            " - 8s - loss: 0.0871 - acc: 0.9704 - val_loss: 0.3694 - val_acc: 0.8661\n",
            "\n",
            "Epoch 00035: val_loss did not improve from 0.21379\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cDDalmCAwJyg",
        "colab_type": "code",
        "outputId": "0968417a-516d-4db8-c7a5-5d84fd4a5bbc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "model.load_weights('/tmp/weights.hdf5')\n",
        "train_loss,train_acc=model.evaluate(X_train,y_train)\n",
        "print(\"traina loss={}\".format(train_loss))\n",
        "print(\"train acc={}\".format(train_acc))\n",
        "test_loss,test_acc=model.evaluate(X_test,y_test)\n",
        "print(\"test loss={}\".format(test_loss))\n",
        "print(\"test loss={}\".format(test_acc))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "5040/5040 [==============================] - 5s 897us/step\n",
            "traina loss=0.051571656909491566\n",
            "train acc=0.9888888888888889\n",
            "298/298 [==============================] - 0s 1ms/step\n",
            "test loss=1.099736867903775\n",
            "test loss=0.9295302005422196\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UdDUSm89wjvi",
        "colab_type": "text"
      },
      "source": [
        "### Loss and Accuracy Curves"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q1OD6P3SwUK3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_loss = history.history['loss']\n",
        "train_acc = history.history['acc']\n",
        "val_loss = history.history['val_loss']\n",
        "val_acc = history.history['val_acc']\n",
        "xc=range(35)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ObPDOrVlwZ54",
        "colab_type": "code",
        "outputId": "930e811c-d5ed-410d-a0ce-c969d23d22a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.plot(xc, train_loss)\n",
        "plt.plot(xc, val_loss)\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend(['train','val'])"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f4c002cacf8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ehQ7ykS3wiJ6",
        "colab_type": "code",
        "outputId": "d669965b-f37a-4981-9b1e-6dcefa033fb1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.plot(xc, train_acc)\n",
        "plt.plot(xc, val_acc)\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Acc\")\n",
        "plt.legend(['train','val'])"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f4b9b1b4cf8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZLI9oGNgWHrX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C4dlZL121e5L",
        "colab_type": "code",
        "outputId": "1884d12e-cef0-4f20-e079-7a40fd4bcb64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "import itertools\n",
        "\n",
        "Y_pred = model.predict(X_test)\n",
        "#print(np.unique(Y_pred))\n",
        "y_pred = np.argmax(Y_pred, axis=1)\n",
        "target_names = ['class 0', 'class 1']\n",
        "print(classification_report(np.argmax(y_test,axis=1), y_pred,target_names=target_names))"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "     class 0       0.90      0.97      0.93       149\n",
            "     class 1       0.96      0.89      0.93       149\n",
            "\n",
            "    accuracy                           0.93       298\n",
            "   macro avg       0.93      0.93      0.93       298\n",
            "weighted avg       0.93      0.93      0.93       298\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QgNg1yTJGzBH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DzxV4PA_xifu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6zPT529w0zKY",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    }
  ]
}